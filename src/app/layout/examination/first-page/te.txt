import { Component, OnInit } from '@angular/core';
import { HubConnection, HubConnectionBuilder } from '@microsoft/signalr';
@Component({
  selector: 'app-first-page',
  templateUrl: './first-page.component.html',
  styleUrl: './first-page.component.css'
})
export class FirstPageComponent implements OnInit{
  private localVideo!: HTMLVideoElement;
  private remoteVideo!: HTMLVideoElement;
  private localStream!: MediaStream;
  private remoteStream!: MediaStream;
  private peerConnection!: RTCPeerConnection;
  private hubConnection!: HubConnection;
  private id = Math.floor(Math.random() * 1000000).toString();
  private pendingIceCandidates: RTCIceCandidateInit[] = [];
  private readonly ICE_SERVERS = {
    iceServers:[
      {
        urls:['stun:stun1.1.google.com:19302', 'stun:stun2.1.google.com:19302']
      }
    ]
  };
  constructor() {}

  ngOnInit(): void {
    this.localVideo = document.getElementById('localVideo') as HTMLVideoElement;
    this.remoteVideo = document.getElementById('remoteVideo') as HTMLVideoElement;

    this.hubConnection = new HubConnectionBuilder()
      .withUrl('https://localhost:7220/signalingHub')
      .build();

    this.hubConnection.on('ReceiveOffer', async (user, offer) => {
      console.log("ReceiveOffer", user, offer);
      const offerDesc: RTCSessionDescriptionInit = JSON.parse(offer);
      if (confirm(`User ${user} is inviting you to a call. Do you want to join?`)) {
        await this.startLocalStream();
        if (!this.peerConnection) {
          this.createPeerConnection();
        }
        this.localStream.getTracks().forEach(track => {
          this.peerConnection.addTrack(track, this.localStream);
        });
        await this.peerConnection.setRemoteDescription(new RTCSessionDescription(offerDesc));
        const answer = await this.peerConnection.createAnswer();
        await this.peerConnection.setLocalDescription(answer);
        await this.hubConnection.invoke('SendAnswer', this.id, JSON.stringify(this.peerConnection.localDescription));

        // Process any pending ICE candidates
        this.pendingIceCandidates.forEach(async (candidate) => {
          try {
            await this.peerConnection.addIceCandidate(candidate);
          } catch (e) {
            console.error('Error adding received ice candidate', e);
          }
        });
        this.pendingIceCandidates = [];
      }
    });

    this.hubConnection.on('ReceiveAnswer', async (user, answer) => {
      console.log("ReceiveAnswer", user, answer);
      const answerDesc: RTCSessionDescriptionInit = JSON.parse(answer);
      await this.peerConnection.setRemoteDescription(new RTCSessionDescription(answerDesc));
      this.pendingIceCandidates.forEach(async (candidate) => {
        try {
          await this.peerConnection.addIceCandidate(candidate);
        } catch (e) {
          console.error('Error adding received ice candidate', e);
        }
      });
      this.pendingIceCandidates = [];
    });

    this.hubConnection.on('ReceiveIceCandidate', async (user, candidate) => {
      try {
        console.log("ReceiveIceCandidate", user, candidate);
        const iceCandidateInit: RTCIceCandidateInit = JSON.parse(candidate);

        if (this.peerConnection && this.peerConnection.remoteDescription) {
          const iceCandidate = new RTCIceCandidate(iceCandidateInit);
          await this.peerConnection.addIceCandidate(iceCandidate);
        } else {
          this.pendingIceCandidates.push(iceCandidateInit);
          console.log('ICE candidate added to pending list.');
        }
      } catch (e) {
        console.error('Error adding received ice candidate', e);
      }
    });

    this.hubConnection.start().catch(err => console.error('Error while starting connection: ' + err));

    // Start local stream and create peer connection when component initializes
    this.startLocalStream().then(() => {
      if (!this.peerConnection) {
        this.createPeerConnection();
      }
    }).catch(error => {
      console.error('Error starting local stream:', error);
    });
  }

  async startCall() {
    try {
      await this.startLocalStream();
      if (!this.peerConnection) {
        this.createPeerConnection();
      }

      this.localStream.getTracks().forEach(track => {
        this.peerConnection.addTrack(track, this.localStream);
      });

      const offer = await this.peerConnection.createOffer();
      await this.peerConnection.setLocalDescription(offer);

      await this.hubConnection.invoke('SendOffer', this.id, JSON.stringify(offer));
      console.log("SendOffer", this.id);
    } catch (e) {
      console.error('Error accessing media devices or creating offer.', e);
    }
  }

  async startLocalStream() {
    try {
      this.localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
      this.localVideo.srcObject = this.localStream;
    } catch (e) {
      console.error('Error accessing media devices.', e);
      throw e; // Rethrow error to handle it in the caller
    }
  }

  createPeerConnection() {
    this.peerConnection = new RTCPeerConnection(this.ICE_SERVERS);

    this.remoteStream = new MediaStream();
    this.remoteVideo.srcObject = this.remoteStream;

    this.peerConnection.onicecandidate = ({ candidate }) => {
      if (candidate) {
        this.hubConnection.invoke('SendIceCandidate', this.id, JSON.stringify(candidate));
      }
    };

    this.peerConnection.ontrack = (event) => {
      console.log('ontrack event:', event);
      event.streams[0].getTracks().forEach((track) => {
        console.log('Adding track to remote stream:', track);
        this.remoteStream.addTrack(track);
      });
    };

    this.peerConnection.oniceconnectionstatechange = () => {
      if (this.peerConnection.iceConnectionState === 'disconnected') {
        this.endCall();
      }
    };
  }

  endCall() {
    if (this.peerConnection) {
      this.peerConnection.close();
    }
    if (this.localStream) {
      this.localStream.getTracks().forEach(track => track.stop());
    }
    this.localVideo.srcObject = null;
    this.remoteVideo.srcObject = null;
  }
}
