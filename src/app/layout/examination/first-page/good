import { Component, OnInit } from '@angular/core';
import { HubConnection, HubConnectionBuilder } from '@microsoft/signalr';
@Component({
  selector: 'app-first-page',
  templateUrl: './first-page.component.html',
  styleUrl: './first-page.component.css'
})
export class FirstPageComponent implements OnInit{
  private localVideo!: HTMLVideoElement;
  private remoteVideo!: HTMLVideoElement;
  private localStream!: MediaStream;
  private remoteStream!: MediaStream;
  protected peerConnection!: RTCPeerConnection;
  private hubConnection!: HubConnection;
  private id = Math.floor(Math.random() * 1000000).toString();
  private pendingIceCandidates: RTCIceCandidateInit[] = [];
  private readonly ICE_SERVERS = {
    iceServers: [
      {
        urls: ['stun:stun1.1.google.com:19302', 'stun:stun2.1.google.com:19302']
      }
    ]
  };

  private mediaRecorder!: MediaRecorder;
  private recordedChunks: Blob[] = [];
  private recording = false;
  private isScreenSharing = false;
  private videoSender!: RTCRtpSender;

  constructor() {}
  private isCameraOn = true;
  private isMicrophoneOn = true;
  toggleCamera() {
    this.isCameraOn = !this.isCameraOn;
    this.localStream.getVideoTracks().forEach(track => {
      track.enabled = this.isCameraOn;
    });
  }

  toggleMicrophone() {
    this.isMicrophoneOn = !this.isMicrophoneOn;
    this.localStream.getAudioTracks().forEach(track => {
      track.enabled = this.isMicrophoneOn;
    });
  }
  ngOnInit(): void {
    this.localVideo = document.getElementById('localVideo') as HTMLVideoElement;
    this.remoteVideo = document.getElementById('remoteVideo') as HTMLVideoElement;

    this.hubConnection = new HubConnectionBuilder()
      .withUrl('http://192.168.100.67:7220/signalingHub')
      .build();

    this.hubConnection.on('ReceiveOffer', async (user, offer) => {
      const offerDesc: RTCSessionDescriptionInit = JSON.parse(offer);
      if (confirm(`User ${user} is inviting you to a call. Do you want to join?`)) {
        await this.startLocalStream();
        if (!this.peerConnection) {
          this.createPeerConnection();
        }
        this.localStream.getTracks().forEach(track => {
          if (track.kind === 'video' || track.kind === 'audio') {
            const sender = this.peerConnection.getSenders().find(s => s.track?.kind === track.kind);
            if (sender) {
              sender.replaceTrack(track);
            } else {
              this.peerConnection.addTrack(track, this.localStream);
            }
          }
        });
        await this.peerConnection.setRemoteDescription(new RTCSessionDescription(offerDesc));
        const answer = await this.peerConnection.createAnswer();
        await this.peerConnection.setLocalDescription(answer);
        await this.hubConnection.invoke('SendAnswer', this.id, JSON.stringify(this.peerConnection.localDescription));

        this.pendingIceCandidates.forEach(async candidate => {
          try {
            await this.peerConnection.addIceCandidate(candidate);
          } catch (e) {
            console.error('Error adding received ice candidate', e);
          }
        });
        this.pendingIceCandidates = [];
      }
    });

    this.hubConnection.on('ReceiveAnswer', async (user, answer) => {
      const answerDesc: RTCSessionDescriptionInit = JSON.parse(answer);
      await this.peerConnection.setRemoteDescription(new RTCSessionDescription(answerDesc));
      this.pendingIceCandidates.forEach(async candidate => {
        try {
          await this.peerConnection.addIceCandidate(candidate);
        } catch (e) {
          console.error('Error adding received ice candidate', e);
        }
      });
      this.pendingIceCandidates = [];
    });

    this.hubConnection.on('ReceiveIceCandidate', async (user, candidate) => {
      const iceCandidateInit: RTCIceCandidateInit = JSON.parse(candidate);

      if (this.peerConnection && this.peerConnection.remoteDescription) {
        const iceCandidate = new RTCIceCandidate(iceCandidateInit);
        await this.peerConnection.addIceCandidate(iceCandidate);
      } else {
        this.pendingIceCandidates.push(iceCandidateInit);
        console.log('ICE candidate added to pending list.');
      }
    });

    this.hubConnection.start().catch(err => console.error('Error while starting connection: ' + err));

    this.startLocalStream().then(() => {
      if (!this.peerConnection) {
        this.createPeerConnection();
      }
    }).catch(error => {
      console.error('Error starting local stream:', error);
    });
  }

  async startCall() {
    try {
      await this.startLocalStream();
      if (!this.peerConnection) {
        this.createPeerConnection();
      }

      this.localStream.getTracks().forEach(track => {
        if (track.kind === 'video' || track.kind === 'audio') {
          const sender = this.peerConnection.getSenders().find(s => s.track?.kind === track.kind);
          if (sender) {
            sender.replaceTrack(track);
          } else {
            this.peerConnection.addTrack(track, this.localStream);
          }
        }
      });

      const offer = await this.peerConnection.createOffer();
      await this.peerConnection.setLocalDescription(offer);

      await this.hubConnection.invoke('SendOffer', this.id, JSON.stringify(offer));
      console.log("SendOffer", this.id);
    } catch (e) {
      console.error('Error accessing media devices or creating offer.', e);
    }
  }

  async startLocalStream() {
    try {
      this.localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
      this.localVideo.srcObject = this.localStream;
      if (this.peerConnection) {
        this.localStream.getTracks().forEach(track => {
          if (track.kind === 'video') {
            const sender = this.peerConnection.getSenders().find(s => s.track?.kind === 'video');
            if (sender) {
              this.videoSender = sender;
              sender.replaceTrack(track);
            } else {
              this.videoSender = this.peerConnection.addTrack(track, this.localStream);
            }
          } else {
            this.peerConnection.addTrack(track, this.localStream);
          }
        });
      }
    } catch (e) {
      console.error('Error accessing media devices.', e);
      throw e;
    }
  }

  async shareScreen() {
    try {
      if (this.isScreenSharing) {
        // Stop screen sharing
        const screenTracks = this.localStream.getVideoTracks();
        screenTracks.forEach(track => {
          track.stop();
        });
        await this.startLocalStream(); // Replace with camera stream
        this.localStream.getTracks().forEach(track => {
          if (track.kind === 'video') {
            this.videoSender.replaceTrack(track); // Replace the sender's track with the camera stream track
          }
        });
        this.localVideo.srcObject = this.localStream;
        this.isScreenSharing = false;
      } else {
        // Start screen sharing
        const screenStream = await navigator.mediaDevices.getDisplayMedia({ video: true });

        const screenTrack = screenStream.getVideoTracks()[0];
        this.videoSender.replaceTrack(screenTrack);

        this.localVideo.srcObject = screenStream;

        screenTrack.onended = async () => {
          // Handle end of screen sharing
          await this.startLocalStream(); // Replace with camera stream
          this.localStream.getTracks().forEach(track => {
            if (track.kind === 'video') {
              this.videoSender.replaceTrack(track); // Replace the sender's track with the camera stream track
            }
          });
          this.localVideo.srcObject = this.localStream;
          this.isScreenSharing = false;
        };

        this.isScreenSharing = true;
      }
    } catch (error) {
      console.error('Error sharing screen:', error);
    }
  }

  createPeerConnection() {
    this.peerConnection = new RTCPeerConnection(this.ICE_SERVERS);

    this.remoteStream = new MediaStream();
    this.remoteVideo.srcObject = this.remoteStream;

    this.peerConnection.onicecandidate = ({ candidate }) => {
      if (candidate) {
        this.hubConnection.invoke('SendIceCandidate', this.id, JSON.stringify(candidate));
      }
    };

    this.peerConnection.ontrack = (event) => {
      console.log('ontrack event:', event);
      event.streams[0].getTracks().forEach((track) => {
        console.log('Adding track to remote stream:', track);
        this.remoteStream.addTrack(track);
      });
    };

    this.peerConnection.oniceconnectionstatechange = () => {
      if (this.peerConnection.iceConnectionState === 'disconnected') {
        this.endCall();
      }
    };
  }

  async toggleRecording() {
    if (!this.recording) {
      try {
        this.recordedChunks = [];
        this.mediaRecorder = new MediaRecorder(this.remoteStream);

        this.mediaRecorder.ondataavailable = (event) => {
          if (event.data.size > 0) {
            this.recordedChunks.push(event.data);
          }
        };

        this.mediaRecorder.onstop = async () => {
          const blob = new Blob(this.recordedChunks, { type: 'video/webm' });
          const url = URL.createObjectURL(blob);

          const a = document.createElement('a');
          a.style.display = 'none';
          a.href = url;
          a.download = 'meeting_record.webm';
          document.body.appendChild(a);
          a.click();
          setTimeout(() => {
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
          }, 100);

          this.recordedChunks = [];
        };

        this.mediaRecorder.start();
        this.recording = true;
      } catch (e) {
        console.error('Error starting recording:', e);
      }
    } else {
      this.mediaRecorder.stop();
      this.recording = false;
    }
  }

  endCall() {
    if (this.peerConnection) {
      this.peerConnection.close();
    }
    if (this.localStream) {
      this.localStream.getTracks().forEach(track => track.stop());
    }
    this.localVideo.srcObject = null;
    this.remoteVideo.srcObject = null;
  }
}
